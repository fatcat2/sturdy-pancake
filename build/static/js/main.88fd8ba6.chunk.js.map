{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["columns","accessor","Header","Table","state","year","data","handleChange","id","event","setState","target","value","console","log","axios","get","then","res","this","defaultPageSize","className","React","Component","Title","Menu","SubMenu","Typography","App","Paragraph","Text","handleClick","e","current","key","catch","err","finally","xs","span","offset","sm","md","lg","xl","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6WAaA,IAAMA,EAAU,CACf,CACCC,SAAU,YACVC,OAAQ,aAET,CACCD,SAAU,aACVC,OAAQ,cAET,CACCD,SAAU,cACVC,OAAQ,eAET,CACCD,SAAU,OACVC,OAAQ,cAET,CACCD,SAAU,QACVC,OAAQ,kBAET,CACCD,SAAU,OACVC,OAAQ,iBAuCKC,E,2MAhCdC,MAAQ,CACPC,KAAM,KACNC,KAAM,CAAC,CAAC,UAAa,SAAU,WAAc,SAAU,YAAe,GAAI,KAAQ,kBAAmB,MAAS,UAAW,KAAQ,a,EAIlIC,aAAe,SAAAC,GAAE,OAAI,SAAAC,GACpB,EAAKC,SAAL,eAAiBF,EAAKC,EAAME,OAAOC,U,mFAGf,IAAD,OACnBC,QAAQC,IAAI,WACZC,IAAMC,IAAI,oBAAoBC,MAAK,SAAAC,GAClCL,QAAQC,IAAII,EAAIZ,MAChB,EAAKI,SAAS,CACbJ,KAAMY,EAAIZ,KAAJ,Y,+BAMR,OACC,kBAAC,IAAD,CACCA,KAAMa,KAAKf,MAAME,KACjBN,QAASA,EACToB,gBAAiB,GACjBC,UAAU,4B,GA5BMC,IAAMC,WChClBC,GADYC,IAAZC,QAC2BC,IAA3BH,OA8COI,GA9CoBD,IAApBE,UAAoBF,IAATG,K,2MAItB1B,MAAQ,CACRC,KAAM,KACNC,KAAM,I,EAGRyB,YAAc,SAAAC,GACZnB,QAAQC,IAAI,SAAUkB,GACtB,EAAKtB,SAAS,CACZuB,QAASD,EAAEE,O,qHAcb,OANArB,QAAQC,IAAI,QACZC,IAAMC,IAAI,4BACPC,MAAK,SAAAX,GAAI,OAAIO,QAAQC,IAAIR,MACzB6B,OAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,MACzBC,QAAQxB,QAAQC,IAAI,QAGrB,6BAAK,6BACD,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAKwB,GAAI,CAACC,KAAM,GAAIC,OAAQ,GAAIC,GAAI,CAACF,KAAM,EAAGC,OAAQ,GAAIE,GAAI,CAACH,KAAM,EAAGC,OAAQ,GAAIG,GAAI,CAACJ,KAAM,EAAGC,OAAO,GAAII,GAAI,CAACL,KAAK,GAAIC,OAAQ,IACjI,kBAAChB,EAAD,0BAHN,IAQE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAKc,GAAI,CAACC,KAAM,GAAIC,OAAQ,GAAIC,GAAI,CAACF,KAAM,EAAGC,OAAQ,GAAIE,GAAI,CAACH,KAAM,EAAGC,OAAQ,GAAIG,GAAI,CAACJ,KAAM,EAAGC,OAAO,GAAII,GAAI,CAACL,KAAM,GAAIC,OAAQ,IAChI,kBAAC,EAAD,a,GAlCMlB,IAAMC,YCAJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.88fd8ba6.chunk.js","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\nimport ReactTable from \"react-table\";\n\n\nfunction toCurrency(numberString) {\n\tif(isNaN(numberString)){\n\t\treturn numberString;\n\t}\n    let number = parseFloat(numberString);\n    return \"$\" + number.toLocaleString('USD');\n}\n\nconst columns = [\n\t{\n\t\taccessor: 'last_name',\n\t\tHeader: 'Last Name'\n\t},\n\t{\n\t\taccessor: 'first_name',\n\t\tHeader: 'First Name'\n\t},\n\t{\n\t\taccessor: 'middle_name',\n\t\tHeader: 'Middle Name'\n\t},\n\t{\n\t\taccessor: 'dept',\n\t\tHeader: 'Department'\n    },\n\t{\n\t\taccessor: 'group',\n\t\tHeader: 'Employee Group'\n\t},\n\t{ \n\t\taccessor: 'comp',\n\t\tHeader: 'Compensation'\n\t}\n];\n\n\nclass Table extends React.Component{\n\n\tstate = {\n\t\tyear: 2018,\n\t\tdata: [{\"last_name\": \"Aasand\", \"first_name\": \"Hardin\", \"middle_name\": \"\", \"dept\": \"FW - 2Engl Ling\", \"group\": \"Faculty\", \"comp\": 123924.12}, ]\n\n\t};\n\n\thandleChange = id => event => {\n\t\tthis.setState({ [id]: event.target.value });\n\t};\n\n\tcomponentDidMount() {\n\t\tconsole.log(\"mounted\")\n\t\taxios.get(\"/react_data/2018\").then(res => {\n\t\t\tconsole.log(res.data);\n\t\t\tthis.setState({\n\t\t\t\tdata: res.data[\"data\"]\n\t\t\t})\n\t\t});\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<ReactTable\n\t\t\t\tdata={this.state.data}\n\t\t\t\tcolumns={columns}\n\t\t\t\tdefaultPageSize={10}\n\t\t\t\tclassName=\"-striped -highlight\"\n\t\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Table;","import React from 'react';\nimport { Menu, Icon, Typography, Divider, PageHeader, Row, Col } from 'antd';\nimport './App.css';\nimport axios from \"axios\";\n\nimport \"react-table/react-table.css\";\nimport Table from \"./Table\"\n\nconst { SubMenu } = Menu;\nconst { Title, Paragraph, Text } = Typography;\n\n\nclass App extends React.Component{\n    state = {\n    year: 2018,\n    data: {}\n  };\n\n  handleClick = e => {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  };\n\n  componentDidMount() {\n  }\n\n  render(){\n    console.log(\"Helo\");\n    axios.get(\"localhost:5000/data/2018\")\n      .then(data => console.log(data))\n      .catch(err => console.log(err))\n      .finally(console.log(\"uwu\"));\n    // send the request\n    return (\n      <div><br />\n          <Row>\n          <Col xs={{span: 24, offset: 1}} sm={{span: 4, offset: 2}} md={{span: 6, offset: 3}} lg={{span: 8, offset:4}} xl={{span:20, offset: 2}}>\n            <Title>\n              pu-salary-guide\n            </Title>\n          </Col>\n        </Row>,\n        <Row>\n        <Col xs={{span: 24, offset: 1}} sm={{span: 4, offset: 2}} md={{span: 6, offset: 3}} lg={{span: 8, offset:4}} xl={{span: 20, offset: 2}}>\n            <Table />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}